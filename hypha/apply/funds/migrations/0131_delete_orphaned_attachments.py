# Generated by Django 4.2.24 on 2025-10-01 15:39

from django.db import migrations
from django.core.files.storage import default_storage
import os


def delete_directory(directory_path):
    """Delete a full directory (empty or not)"""

    directories, files = default_storage.listdir(directory_path)

    for item in directories:
        item_path = os.path.join(directory_path, item)
        if default_storage.exists(item_path):
            # Recursively delete subdirectories
            delete_directory(item_path)

    for item in files:
        item_path = os.path.join(directory_path, item)
        if default_storage.exists(item_path):
            # Delete files
            default_storage.delete(item_path)

    if default_storage.exists(directory_path):
        # Delete the empty directory
        default_storage.delete(directory_path)


def delete_orphaned_attachments(apps, schema_editor):
    """Remove all attachments not associated with an application"""

    ApplicationSubmission = apps.get_model("funds", "ApplicationSubmission")

    submission_attachment_path = f"{default_storage.base_location}/submission"

    folders_to_delete = []
    folders_to_check = []

    for folder in default_storage.listdir(submission_attachment_path)[0]:
        # `listdir` returns ([folders], [files]) ^
        try:
            folders_to_check.append(int(folder))
        except ValueError:
            # Folder name is not an int, therefore not a submission ID and can be deleted (an edge case)
            folders_to_delete.append(folder)

    # Get a list of all undeleted submissions that have a folder
    valid_ids = set(
        ApplicationSubmission.objects.filter(id__in=folders_to_check).values_list(
            "id", flat=True
        )
    )

    # Find the set difference and delete those folders
    folders_to_delete += list(set(folders_to_check) - valid_ids)

    for folder in folders_to_delete:
        try:
            delete_directory(f"{submission_attachment_path}/{folder}")
        except FileNotFoundError:
            # Will get thrown when unit tests attempt to run migrations
            pass


class Migration(migrations.Migration):
    dependencies = [
        ("funds", "0130_alter_applicationsubmission_status"),
    ]

    operations = [migrations.RunPython(delete_orphaned_attachments)]

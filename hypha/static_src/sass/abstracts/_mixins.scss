@use "sass:list";
@use "sass:map";
@use "functions";
@use "variables";

// stylelint-disable

@use "sass:math";

// Media queries
@mixin media-query($queries...) {
    @each $query in $queries {
        @each $breakpoint in variables.$breakpoints {
            $name: list.nth($breakpoint, 1);
            $declaration: list.nth($breakpoint, 2);

            @if $query == $name and $declaration {
                @media only screen and #{$declaration} {
                    @content;
                }
            }
        }
    }
}

//   Placeholder text
@mixin placeholder-text {
    &.placeholder {
        @content;
    }
    &:-moz-placeholder {
        @content;
    }
    &::-moz-placeholder {
        @content;
    }
    &:-ms-input-placeholder {
        @content;
    }
    &::-webkit-input-placeholder {
        @content;
    }
}

// Hide text
@mixin hidden {
    position: absolute;
    clip: rect(0 0 0 0);
    clip-path: inset(50%);
    height: 1px;
    width: 1px;
    overflow: hidden;
    white-space: nowrap;
}

// Output a rem value for the given property
@mixin rem($property, $values) {
    $rem: ();

    @each $value in $values {
        @if $value == 0 or $value == auto or $value == inherit {
            $rem: list.append($rem, $value);
        } @else {
            $rem: list.append(
                $rem,
                functions.rem(functions.strip-unit($value))
            );
        }
    }
    #{$property}: $rem;
}

// Output a `font-size: [x]rem;` declaration for the given px value
@mixin rem-font-size($font-size) {
    @include rem(font-size, $font-size);
}

// Font sizes
@mixin font-size($keyword) {
    $size: map.get(variables.$font-sizes, $keyword);

    @if $size == null {
        @warn 'Font size '#{$keyword}' does not exist';
    } @else {
        @include rem-font-size($size);
    }
}

// Button mixin
@mixin button($bg, $hover-bg) {
    padding: 0.5em 2rem;
    font-weight: variables.$weight--bold;
    color: variables.$color--white;
    text-align: center;
    background: $bg;
    border: 1px solid variables.$color--white;
    transition: color, background, border, variables.$transition;
    display: flex;
    align-items: center;
    justify-content: center;

    &:hover,
    &:focus,
    &:active {
        cursor: pointer;
        background: $hover-bg;
    }
}

// Narrow button mixin
@mixin button--narrow {
    padding: 0.25rem 0.75rem;
    font-size: 15px;
    vertical-align: middle;

    @include media-query(lg) {
        & {
            padding: 0.25rem 0.75rem;
        }
    }
}

// Small button mixin
@mixin button--small {
    padding: 2px;
    font-size: 12px;

    @include media-query(lg) {
        & {
            padding: 3px 5px;
        }
    }
}

// Wide button mixin
@mixin button--wide {
    @include media-query(lg) {
        & {
            padding: 0.5em 80px;
        }
    }
}

// Viewport sized typography mixin that takes a min and max pixel-based value
@mixin responsive-font-sizes($min, $max) {
    $minbreakpoint: 640;
    $maxbreakpoint: 1280;
    $minsize: functions.strip-unit($min);
    $maxsize: functions.strip-unit($max);
    $minrem: functions.rem($min);
    $maxrem: functions.rem($max);
    $slope: math.div($maxsize - $minsize, $maxbreakpoint - $minbreakpoint);
    $intersection: functions.rem($minsize - $slope * $minbreakpoint);

    font-size: clamp($minrem, calc($intersection + $slope * 100vw), $maxrem);
}

// Triangle mixin
// @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
// @param {Color} $color [currentcolor] - Triangle color
// @param {Length} $size [1em] - Triangle size
@mixin triangle($direction, $color: currentcolor, $size: 1em) {
    @if not list.index(top right bottom left, $direction) {
        @error 'Direction must be either `top`, `right`, `bottom` or `left`.';
    }

    width: 0;
    height: 0;
    content: "";
    border-#{functions.opposite-direction($direction)}: ($size * 1.5) solid
        $color;

    $perpendicular-borders: $size solid transparent;

    @if $direction == top or $direction == bottom {
        border-inline-end: $perpendicular-borders;
        border-inline-start: $perpendicular-borders;
    } @else if $direction == right or $direction == left {
        border-block-start: $perpendicular-borders;
        border-block-end: $perpendicular-borders;
    }
}

@mixin table-ordering-styles {
    thead {
        th {
            // ordering
            &.desc,
            &.asc {
                position: relative;
                color: variables.$color--dark-grey;

                &::after {
                    position: absolute;
                    inset-block-start: 50%;
                    margin-inline-start: 3px;
                }

                a {
                    color: inherit;
                }
            }

            &.desc {
                &::after {
                    @include triangle(top, variables.$color--default, 5px);
                }
            }

            &.asc {
                &::after {
                    @include triangle(bottom, variables.$color--default, 5px);
                }
            }
        }
    }
}

@mixin table-checkbox {
    input[type="checkbox"] {
        margin: 0 auto;
        display: block;
        width: 1.1rem;
        height: 1.1rem;
    }
}

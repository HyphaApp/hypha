// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test form field component should render CheckBox render a form field component with CheckBox 1`] = `
<FormField
  error="error text"
  fieldProps={
    Object {
      "name": "name text",
    }
  }
  kwargs={
    Object {
      "choices": Array [
        Array [
          0,
          1,
        ],
      ],
      "help_link": "link1",
      "help_text": "help_text",
      "label": "label1",
      "required": true,
      "text": "text1",
    }
  }
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "name text",
          Array [
            "value",
          ],
        ],
      ],
    }
  }
  type="CheckboxInput"
  value="value"
  widget={
    Object {
      "attrs": Object {
        "cols": 1,
        "rows": 1,
      },
      "mce_attrs": Object {
        "key": "mce_attrs1",
      },
      "type": "",
      "widgets": Array [],
    }
  }
>
  <div
    className="formFieldcontainer"
  >
    <CheckBox
      choices={
        Array [
          Array [
            0,
            1,
          ],
        ]
      }
      help_text="help_text"
      helperProps={
        Object {
          "link": "link1",
          "text": "help_text",
        }
      }
      label="label1"
      onChange={[Function]}
      required={true}
      value="value"
    >
      <div
        className="form__group  form__group--checkbox form__group--wrap"
      >
        <label
          className="form__question form__question--boolean_field checkbox_input"
        >
          <span>
            label1
          </span>
          <span
            className="form__required"
          >
             *
          </span>
        </label>
        <div
          className="form__item"
          onClick={[Function]}
        >
          <input
            checked="checked"
            onChange={[Function]}
            type="checkbox"
          />
          <label />
        </div>
        <hr />
        <HelperComponent
          link="link1"
          text="help_text"
        >
          <p
            className="form__help"
            dangerouslySetInnerHTML={
              Object {
                "__html": "help_text",
              }
            }
          />
          <p
            className="form__help-link"
          >
            <a
              href="link1"
              rel="noopener noreferrer"
              target="_blank"
            >
              See help guide for more information.
              <svg
                className="form__open-icon"
              >
                <use
                  href="#open-in-new-tab"
                />
              </svg>
            </a>
          </p>
        </HelperComponent>
      </div>
    </CheckBox>
    <div
      className="error"
    >
      error text
    </div>
  </div>
</FormField>
`;

exports[`Test form field component should render DropDown render a form field component with DropDown 1`] = `
<FormField
  error="error text"
  fieldProps={
    Object {
      "name": "name text",
    }
  }
  kwargs={
    Object {
      "choices": Array [
        Array [
          0,
          1,
        ],
      ],
      "help_link": "link1",
      "help_text": "help_text",
      "label": "label1",
      "required": true,
      "text": "text1",
    }
  }
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "name text",
          Array [
            "value",
          ],
        ],
      ],
    }
  }
  type="Select"
  value="value"
  widget={
    Object {
      "attrs": Object {
        "cols": 1,
        "rows": 1,
      },
      "mce_attrs": Object {
        "key": "mce_attrs1",
      },
      "type": "",
      "widgets": Array [],
    }
  }
>
  <div
    className="formFieldcontainer"
  >
    <DropDown
      choices={
        Array [
          Array [
            0,
            1,
          ],
        ]
      }
      helperProps={
        Object {
          "link": "link1",
          "text": "help_text",
        }
      }
      label="label1"
      onChange={[Function]}
      required={true}
      value="value"
    >
      <div
        className="form__group "
      >
        <label
          className="form__question form__question--choice_field select"
          required=""
        >
          <span>
            label1
          </span>
          <span
            className="form__required"
          >
             *
          </span>
        </label>
        <HelperComponent
          link="link1"
          text="help_text"
        >
          <p
            className="form__help"
            dangerouslySetInnerHTML={
              Object {
                "__html": "help_text",
              }
            }
          />
          <p
            className="form__help-link"
          >
            <a
              href="link1"
              rel="noopener noreferrer"
              target="_blank"
            >
              See help guide for more information.
              <svg
                className="form__open-icon"
              >
                <use
                  href="#open-in-new-tab"
                />
              </svg>
            </a>
          </p>
        </HelperComponent>
        <div
          className="form__item"
        >
          <div
            className="form__select"
          >
            <select
              onChange={[Function]}
              value="value"
            >
              <option
                key="0"
                value={0}
              >
                1
              </option>
            </select>
          </div>
        </div>
      </div>
    </DropDown>
    <div
      className="error"
    >
      error text
    </div>
  </div>
</FormField>
`;

exports[`Test form field component should render LoadHTML render a form field component with LoadHTML 1`] = `
<FormField
  error="error text"
  fieldProps={
    Object {
      "name": "name text",
    }
  }
  kwargs={
    Object {
      "choices": Array [
        Array [
          0,
          1,
        ],
      ],
      "fields": Array [
        Object {},
        Object {
          "choices": Array [
            1,
          ],
        },
      ],
      "help_link": "link1",
      "help_text": "help_text",
      "label": "label1",
      "required": true,
      "text": "text1",
    }
  }
  onChange={[MockFunction]}
  type="LoadHTML"
  value="value"
  widget={
    Object {
      "attrs": Object {
        "cols": 1,
        "rows": 1,
      },
      "mce_attrs": Object {
        "key": "mce_attrs1",
      },
      "type": "",
      "widgets": Array [
        Object {
          "mce_attrs": Object {
            "key": "mce_attrs2",
          },
        },
      ],
    }
  }
>
  <div
    className="formFieldcontainer"
  >
    <LoadHTML
      text="text1"
    >
      <div
        className="form__group rich-text"
      >
        <div
          dangerouslySetInnerHTML={
            Object {
              "__html": "text1",
            }
          }
        />
      </div>
    </LoadHTML>
    <div
      className="error"
    >
      error text
    </div>
  </div>
</FormField>
`;

exports[`Test form field component should render PagedownWidget render a form field component with PagedownWidget 1`] = `
<div
  className="formFieldcontainer"
>
  <PageDownWidget
    helperProps={
      Object {
        "link": "link1",
        "text": "help_text",
      }
    }
    init={
      Object {
        "key": "mce_attrs1",
      }
    }
    label="label1"
    onChange={[Function]}
    required={true}
    value="value"
  />
  <div
    className="error"
  >
    error text
  </div>
</div>
`;

exports[`Test form field component should render Radio render a form field component with Radio 1`] = `
<FormField
  error="error text"
  fieldProps={
    Object {
      "name": "name text",
    }
  }
  kwargs={
    Object {
      "choices": Array [
        Array [
          0,
          1,
        ],
      ],
      "help_link": "link1",
      "help_text": "help_text",
      "label": "label1",
      "required": true,
      "text": "text1",
    }
  }
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "name text",
          Array [
            "value",
          ],
        ],
      ],
    }
  }
  type=""
  value="value"
  widget={
    Object {
      "attrs": Object {
        "cols": 1,
        "rows": 1,
      },
      "mce_attrs": Object {
        "key": "mce_attrs1",
      },
      "type": "RadioSelect",
      "widgets": Array [],
    }
  }
>
  <div
    className="formFieldcontainer"
  >
    <Radio
      choices={
        Array [
          Array [
            0,
            1,
          ],
        ]
      }
      help_text="help_text"
      helperProps={
        Object {
          "link": "link1",
          "text": "help_text",
        }
      }
      label="label1"
      onChange={[Function]}
      required={true}
      value="value"
    >
      <div
        className="form__group "
      >
        <label
          className="form__question form__question--choice_field radio_select"
          required=""
        >
          <span>
            label1
          </span>
          <span
            className="form__required"
          >
             *
          </span>
        </label>
        <HelperComponent
          link="link1"
          text="help_text"
        >
          <p
            className="form__help"
            dangerouslySetInnerHTML={
              Object {
                "__html": "help_text",
              }
            }
          />
          <p
            className="form__help-link"
          >
            <a
              href="link1"
              rel="noopener noreferrer"
              target="_blank"
            >
              See help guide for more information.
              <svg
                className="form__open-icon"
              >
                <use
                  href="#open-in-new-tab"
                />
              </svg>
            </a>
          </p>
        </HelperComponent>
        <div
          className="form__item"
        >
          <ul
            className="grid grid--no-margin grid--two"
          >
            <li
              className="form__item"
              key="0"
              onClick={[Function]}
            >
              <input
                checked=""
                onChange={[Function]}
                type="radio"
                value={0}
              />
              <label
                className="form__label"
                htmlFor="undefined-0"
              >
                1
              </label>
            </li>
          </ul>
        </div>
      </div>
    </Radio>
    <div
      className="error"
    >
      error text
    </div>
  </div>
</FormField>
`;

exports[`Test form field component should render ScoredAnswerWidget render a form field component with ScoredAnswerWidget 1`] = `
<div
  className="formFieldcontainer"
>
  <ScoredAnswerWidget
    help_text="help_text"
    helperProps={
      Object {
        "link": "link1",
        "text": "help_text",
      }
    }
    kwargs={
      Object {
        "choices": Array [
          Array [
            0,
            1,
          ],
        ],
        "fields": Array [
          Object {},
          Object {
            "choices": Array [
              1,
            ],
          },
        ],
        "help_link": "link1",
        "help_text": "help_text",
        "label": "label1",
        "required": true,
        "text": "text1",
      }
    }
    label="label1"
    onChange={[Function]}
    required={true}
    value={Array []}
    widget={
      Array [
        Object {
          "mce_attrs": Object {
            "key": "mce_attrs2",
          },
        },
      ]
    }
  />
  <div
    className="error"
  >
    error text
  </div>
</div>
`;

exports[`Test form field component should render TextBox render a form field component with textbox 1`] = `
<FormField
  error="error text"
  fieldProps={
    Object {
      "name": "name text",
    }
  }
  kwargs={
    Object {
      "choices": Array [
        Array [
          0,
          1,
        ],
      ],
      "help_link": "link1",
      "help_text": "help_text",
      "label": "label1",
      "required": true,
      "text": "text1",
    }
  }
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          undefined,
          undefined,
        ],
      ],
    }
  }
  type="type2"
  value={
    Array [
      "value",
    ]
  }
  widget={
    Object {
      "mce_attrs": "mce_attrs1",
      "type": "EmailInput",
      "widgets": Array [],
    }
  }
>
  <div
    className="formFieldcontainer"
  >
    <TextBox
      helperProps={
        Object {
          "link": "link1",
          "text": "help_text",
        }
      }
      label="label1"
      onChange={[Function]}
      required={true}
      value={
        Array [
          "value",
        ]
      }
    >
      <div
        className="form__group "
      >
        <label
          className="form__question form__question--char_field text_input"
        >
          <span>
            label1
          </span>
          <span
            className="form__required"
          >
             *
          </span>
        </label>
        <HelperComponent
          link="link1"
          text="help_text"
        >
          <p
            className="form__help"
            dangerouslySetInnerHTML={
              Object {
                "__html": "help_text",
              }
            }
          />
          <p
            className="form__help-link"
          >
            <a
              href="link1"
              rel="noopener noreferrer"
              target="_blank"
            >
              See help guide for more information.
              <svg
                className="form__open-icon"
              >
                <use
                  href="#open-in-new-tab"
                />
              </svg>
            </a>
          </p>
        </HelperComponent>
        <div
          className="form__item"
        >
          <input
            onChange={[Function]}
            type="text"
            value={
              Array [
                "value",
              ]
            }
          />
        </div>
      </div>
    </TextBox>
    <div
      className="error"
    >
      error text
    </div>
  </div>
</FormField>
`;

exports[`Test form field component should render Textarea render a form field component with Textarea 1`] = `
<FormField
  error="error text"
  fieldProps={
    Object {
      "name": "name text",
    }
  }
  kwargs={
    Object {
      "choices": Array [
        Array [
          0,
          1,
        ],
      ],
      "help_link": "link1",
      "help_text": "help_text",
      "label": "label1",
      "required": true,
      "text": "text1",
    }
  }
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "name text",
          Array [
            "value",
          ],
        ],
      ],
    }
  }
  type="Textarea"
  value="value"
  widget={
    Object {
      "attrs": Object {
        "cols": 1,
        "rows": 1,
      },
      "mce_attrs": Object {
        "key": "mce_attrs1",
      },
      "type": "Textarea",
      "widgets": Array [],
    }
  }
>
  <div
    className="formFieldcontainer"
  >
    <Textarea
      helperProps={
        Object {
          "link": "link1",
          "text": "help_text",
        }
      }
      label="label1"
      onChange={[Function]}
      required={true}
      value="value"
      widget={
        Object {
          "attrs": Object {
            "cols": 1,
            "rows": 1,
          },
          "mce_attrs": Object {
            "key": "mce_attrs1",
          },
          "type": "Textarea",
          "widgets": Array [],
        }
      }
    >
      <div
        className="form__group "
      >
        <div
          className="form__group  form__group--wrap"
          data-word-limit="1000"
        >
          <label
            className="form__question form__question--char_field textarea"
          >
            <span>
              label1
            </span>
            <span
              className="form__required"
            >
               *
            </span>
          </label>
          <HelperComponent
            link="link1"
            text="help_text"
          >
            <p
              className="form__help"
              dangerouslySetInnerHTML={
                Object {
                  "__html": "help_text",
                }
              }
            />
            <p
              className="form__help-link"
            >
              <a
                href="link1"
                rel="noopener noreferrer"
                target="_blank"
              >
                See help guide for more information.
                <svg
                  className="form__open-icon"
                >
                  <use
                    href="#open-in-new-tab"
                  />
                </svg>
              </a>
            </p>
          </HelperComponent>
          <div
            className="form__item"
          >
            <textarea
              cols={1}
              onChange={[Function]}
              rows={1}
              value="value"
            />
          </div>
        </div>
      </div>
    </Textarea>
    <div
      className="error"
    >
      error text
    </div>
  </div>
</FormField>
`;

exports[`Test form field component should render TinyMCE render a form field component with TinyMCE 1`] = `
<div
  className="formFieldcontainer"
>
  <TinyMCE
    helperProps={
      Object {
        "link": "link1",
        "text": "help_text",
      }
    }
    init={
      Object {
        "key": "mce_attrs1",
      }
    }
    label="label1"
    onChange={[Function]}
    required={true}
    value="value"
  />
  <div
    className="error"
  >
    error text
  </div>
</div>
`;

exports[`Test form field component should render unknown type render a form field component with unknown type passed 1`] = `
<FormField
  error="error text"
  fieldProps={
    Object {
      "name": "name text",
    }
  }
  kwargs={
    Object {
      "choices": Array [
        Array [
          0,
          1,
        ],
      ],
      "fields": Array [
        Object {},
        Object {
          "choices": Array [
            1,
          ],
        },
      ],
      "help_link": "link1",
      "help_text": "help_text",
      "label": "label1",
      "required": true,
      "text": "text1",
    }
  }
  onChange={[MockFunction]}
  type="PageDownWidget"
  value="value"
  widget={
    Object {
      "attrs": Object {
        "cols": 1,
        "rows": 1,
      },
      "mce_attrs": Object {
        "key": "mce_attrs1",
      },
      "type": "none type",
      "widgets": Array [
        Object {
          "mce_attrs": Object {
            "key": "mce_attrs2",
          },
        },
      ],
    }
  }
>
  <div
    className="formFieldcontainer"
  >
    <div>
      Unknown field type 
      none type
    </div>
    <div
      className="error"
    >
      error text
    </div>
  </div>
</FormField>
`;

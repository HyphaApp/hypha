// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test screening decision Container Should render review form with Sidebarblock 1`] = `
<ScreeningStatusContainer
  defaultOptions={
    Object {
      "no": Object {
        "id": 2,
        "title": "b",
      },
      "yes": Object {
        "id": 1,
        "title": "a",
      },
    }
  }
  initializeAction={[MockFunction]}
  screeningInfo={
    Object {
      "defaultSelectedValue": Object {
        "id": 1,
      },
      "loading": false,
      "selectedValues": Array [
        1,
      ],
    }
  }
  screeningStatuses={
    Array [
      1,
      2,
    ]
  }
  selectVisibleOption={[MockFunction]}
  visibleOptions={
    Array [
      Object {
        "id": 3,
        "selected": false,
        "title": "title1",
        "yes": true,
      },
      Object {
        "id": 4,
        "selected": false,
        "title": "title2",
        "yes": true,
      },
    ]
  }
>
  <SidebarBlock
    title="Screening decision"
  >
    <div
      className="sidebar-block"
    >
      <h5>
        Screening decision
      </h5>
      <div
        className="screening-status-box"
        style={
          Object {
            "padding": "1rem",
          }
        }
      >
        <div
          className="screening-default-options"
        >
          <div
            className="screening-status-yes-disabled"
            onClick={[Function]}
          >
            <WithStyles(ForwardRef(SvgIcon))
              className="thumbs-up-color"
              style={
                Object {
                  "alignSelf": "center",
                }
              }
            >
              <ForwardRef(SvgIcon)
                className="thumbs-up-color"
                classes={
                  Object {
                    "colorAction": "MuiSvgIcon-colorAction",
                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                    "colorError": "MuiSvgIcon-colorError",
                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                    "root": "MuiSvgIcon-root",
                  }
                }
                style={
                  Object {
                    "alignSelf": "center",
                  }
                }
              >
                <svg
                  aria-hidden={true}
                  className="MuiSvgIcon-root thumbs-up-color"
                  focusable="false"
                  style={
                    Object {
                      "alignSelf": "center",
                    }
                  }
                  viewBox="0 0 24 24"
                >
                  <path
                    d="m1.75 23h2.5c.965 0 1.75-.785 1.75-1.75v-11.5c0-.965-.785-1.75-1.75-1.75h-2.5c-.965 0-1.75.785-1.75 1.75v11.5c0 .965.785 1.75 1.75 1.75z"
                  />
                  <path
                    d="m12.781.75c-1 0-1.5.5-1.5 3 0 2.376-2.301 4.288-3.781 5.273v12.388c1.601.741 4.806 1.839 9.781 1.839h1.6c1.95 0 3.61-1.4 3.94-3.32l1.12-6.5c.42-2.45-1.46-4.68-3.94-4.68h-4.72s.75-1.5.75-4c0-3-2.25-4-3.25-4z"
                  />
                </svg>
              </ForwardRef(SvgIcon)>
            </WithStyles(ForwardRef(SvgIcon))>
            <div>
              a
            </div>
          </div>
          <div
            className="screening-status-no-enabled"
            onClick={[Function]}
          >
            <WithStyles(ForwardRef(SvgIcon))
              className=""
              style={
                Object {
                  "alignSelf": "center",
                }
              }
            >
              <ForwardRef(SvgIcon)
                className=""
                classes={
                  Object {
                    "colorAction": "MuiSvgIcon-colorAction",
                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                    "colorError": "MuiSvgIcon-colorError",
                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                    "root": "MuiSvgIcon-root",
                  }
                }
                style={
                  Object {
                    "alignSelf": "center",
                  }
                }
              >
                <svg
                  aria-hidden={true}
                  className="MuiSvgIcon-root"
                  focusable="false"
                  style={
                    Object {
                      "alignSelf": "center",
                    }
                  }
                  viewBox="0 0 24 24"
                >
                  <path
                    d="m22.25 1h-2.5c-.965 0-1.75.785-1.75 1.75v11.5c0 .965.785 1.75 1.75 1.75h2.5c.965 0 1.75-.785 1.75-1.75v-11.5c0-.965-.785-1.75-1.75-1.75z"
                  />
                  <path
                    d="m5.119.75c-1.95 0-3.61 1.4-3.94 3.32l-1.12 6.5c-.42 2.45 1.46 4.68 3.94 4.68h4.72s-.75 1.5-.75 4c0 3 2.25 4 3.25 4s1.5-.5 1.5-3c0-2.376 2.301-4.288 3.781-5.273v-12.388c-1.601-.741-4.806-1.839-9.781-1.839z"
                  />
                </svg>
              </ForwardRef(SvgIcon)>
            </WithStyles(ForwardRef(SvgIcon))>
            <div>
              b
            </div>
          </div>
        </div>
        <div
          className="screening-visible-options"
        >
          <h6
            style={
              Object {
                "fontWeight": "550",
                "width": "100%",
              }
            }
          >
            Screening reasons
          </h6>
          <WithStyles(ForwardRef(Chip))
            icon={null}
            key="3"
            label="title1"
            onClick={[Function]}
            style={
              Object {
                "margin": "0.3em",
              }
            }
            variant="outlined"
          >
            <ForwardRef(Chip)
              classes={
                Object {
                  "avatar": "MuiChip-avatar",
                  "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                  "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                  "avatarSmall": "MuiChip-avatarSmall",
                  "clickable": "MuiChip-clickable",
                  "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                  "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                  "colorPrimary": "MuiChip-colorPrimary",
                  "colorSecondary": "MuiChip-colorSecondary",
                  "deletable": "MuiChip-deletable",
                  "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                  "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                  "deleteIcon": "MuiChip-deleteIcon",
                  "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                  "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                  "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                  "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                  "deleteIconSmall": "MuiChip-deleteIconSmall",
                  "disabled": "Mui-disabled",
                  "icon": "MuiChip-icon",
                  "iconColorPrimary": "MuiChip-iconColorPrimary",
                  "iconColorSecondary": "MuiChip-iconColorSecondary",
                  "iconSmall": "MuiChip-iconSmall",
                  "label": "MuiChip-label",
                  "labelSmall": "MuiChip-labelSmall",
                  "outlined": "MuiChip-outlined",
                  "outlinedPrimary": "MuiChip-outlinedPrimary",
                  "outlinedSecondary": "MuiChip-outlinedSecondary",
                  "root": "MuiChip-root",
                  "sizeSmall": "MuiChip-sizeSmall",
                }
              }
              icon={null}
              label="title1"
              onClick={[Function]}
              style={
                Object {
                  "margin": "0.3em",
                }
              }
              variant="outlined"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiChip-root MuiChip-outlined MuiChip-clickable"
                component="div"
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                role="button"
                style={
                  Object {
                    "margin": "0.3em",
                  }
                }
                tabIndex={0}
              >
                <ForwardRef(ButtonBase)
                  className="MuiChip-root MuiChip-outlined MuiChip-clickable"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="div"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  role="button"
                  style={
                    Object {
                      "margin": "0.3em",
                    }
                  }
                  tabIndex={0}
                >
                  <div
                    className="MuiButtonBase-root MuiChip-root MuiChip-outlined MuiChip-clickable"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    role="button"
                    style={
                      Object {
                        "margin": "0.3em",
                      }
                    }
                    tabIndex={0}
                  >
                    <span
                      className="MuiChip-label"
                    >
                      title1
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </div>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Chip)>
          </WithStyles(ForwardRef(Chip))>
          <WithStyles(ForwardRef(Chip))
            icon={null}
            key="4"
            label="title2"
            onClick={[Function]}
            style={
              Object {
                "margin": "0.3em",
              }
            }
            variant="outlined"
          >
            <ForwardRef(Chip)
              classes={
                Object {
                  "avatar": "MuiChip-avatar",
                  "avatarColorPrimary": "MuiChip-avatarColorPrimary",
                  "avatarColorSecondary": "MuiChip-avatarColorSecondary",
                  "avatarSmall": "MuiChip-avatarSmall",
                  "clickable": "MuiChip-clickable",
                  "clickableColorPrimary": "MuiChip-clickableColorPrimary",
                  "clickableColorSecondary": "MuiChip-clickableColorSecondary",
                  "colorPrimary": "MuiChip-colorPrimary",
                  "colorSecondary": "MuiChip-colorSecondary",
                  "deletable": "MuiChip-deletable",
                  "deletableColorPrimary": "MuiChip-deletableColorPrimary",
                  "deletableColorSecondary": "MuiChip-deletableColorSecondary",
                  "deleteIcon": "MuiChip-deleteIcon",
                  "deleteIconColorPrimary": "MuiChip-deleteIconColorPrimary",
                  "deleteIconColorSecondary": "MuiChip-deleteIconColorSecondary",
                  "deleteIconOutlinedColorPrimary": "MuiChip-deleteIconOutlinedColorPrimary",
                  "deleteIconOutlinedColorSecondary": "MuiChip-deleteIconOutlinedColorSecondary",
                  "deleteIconSmall": "MuiChip-deleteIconSmall",
                  "disabled": "Mui-disabled",
                  "icon": "MuiChip-icon",
                  "iconColorPrimary": "MuiChip-iconColorPrimary",
                  "iconColorSecondary": "MuiChip-iconColorSecondary",
                  "iconSmall": "MuiChip-iconSmall",
                  "label": "MuiChip-label",
                  "labelSmall": "MuiChip-labelSmall",
                  "outlined": "MuiChip-outlined",
                  "outlinedPrimary": "MuiChip-outlinedPrimary",
                  "outlinedSecondary": "MuiChip-outlinedSecondary",
                  "root": "MuiChip-root",
                  "sizeSmall": "MuiChip-sizeSmall",
                }
              }
              icon={null}
              label="title2"
              onClick={[Function]}
              style={
                Object {
                  "margin": "0.3em",
                }
              }
              variant="outlined"
            >
              <WithStyles(ForwardRef(ButtonBase))
                className="MuiChip-root MuiChip-outlined MuiChip-clickable"
                component="div"
                onClick={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                role="button"
                style={
                  Object {
                    "margin": "0.3em",
                  }
                }
                tabIndex={0}
              >
                <ForwardRef(ButtonBase)
                  className="MuiChip-root MuiChip-outlined MuiChip-clickable"
                  classes={
                    Object {
                      "disabled": "Mui-disabled",
                      "focusVisible": "Mui-focusVisible",
                      "root": "MuiButtonBase-root",
                    }
                  }
                  component="div"
                  onClick={[Function]}
                  onKeyDown={[Function]}
                  onKeyUp={[Function]}
                  role="button"
                  style={
                    Object {
                      "margin": "0.3em",
                    }
                  }
                  tabIndex={0}
                >
                  <div
                    className="MuiButtonBase-root MuiChip-root MuiChip-outlined MuiChip-clickable"
                    onBlur={[Function]}
                    onClick={[Function]}
                    onDragLeave={[Function]}
                    onFocus={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    onMouseDown={[Function]}
                    onMouseLeave={[Function]}
                    onMouseUp={[Function]}
                    onTouchEnd={[Function]}
                    onTouchMove={[Function]}
                    onTouchStart={[Function]}
                    role="button"
                    style={
                      Object {
                        "margin": "0.3em",
                      }
                    }
                    tabIndex={0}
                  >
                    <span
                      className="MuiChip-label"
                    >
                      title2
                    </span>
                    <WithStyles(memo)
                      center={false}
                    >
                      <ForwardRef(TouchRipple)
                        center={false}
                        classes={
                          Object {
                            "child": "MuiTouchRipple-child",
                            "childLeaving": "MuiTouchRipple-childLeaving",
                            "childPulsate": "MuiTouchRipple-childPulsate",
                            "ripple": "MuiTouchRipple-ripple",
                            "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                            "rippleVisible": "MuiTouchRipple-rippleVisible",
                            "root": "MuiTouchRipple-root",
                          }
                        }
                      >
                        <span
                          className="MuiTouchRipple-root"
                        >
                          <TransitionGroup
                            childFactory={[Function]}
                            component={null}
                            exit={true}
                          />
                        </span>
                      </ForwardRef(TouchRipple)>
                    </WithStyles(memo)>
                  </div>
                </ForwardRef(ButtonBase)>
              </WithStyles(ForwardRef(ButtonBase))>
            </ForwardRef(Chip)>
          </WithStyles(ForwardRef(Chip))>
        </div>
      </div>
      <div
        className="partition"
      >
         
      </div>
    </div>
  </SidebarBlock>
</ScreeningStatusContainer>
`;

exports[`Test screening decision Container Should render review form with loading 1`] = `
<ScreeningStatusContainer
  initializeAction={
    [MockFunction] {
      "calls": Array [
        Array [
          1,
        ],
      ],
    }
  }
  screeningInfo={
    Object {
      "loading": true,
    }
  }
  submissionID={1}
>
  <LoadingPanel>
    <div
      className="loading-panel"
    >
      <div
        className="loading-panel__text"
      >
        <h5>
          Loading...
        </h5>
      </div>
      <div
        className="loading-panel__icon"
      >
        <OTFLoadingIcon>
          <svg
            className="logo-loading"
            viewBox="0 0 45 40"
          >
            <g
              fill="none"
              fillRule="nonzero"
            >
              <rect
                className="logo-part logo-part-1"
                fill="#25AAE1"
                height="5"
                transform="translate(10 0)"
                width="5"
              />
              <rect
                className="logo-part logo-part-2"
                fill="#25AAE1"
                height="5"
                transform="translate(5 5)"
                width="5"
              />
              <rect
                className="logo-part logo-part-3"
                fill="#25AAE1"
                height="5"
                transform="translate(0 10)"
                width="5"
              />
              <rect
                className="logo-part logo-part-4"
                fill="#25AAE1"
                height="5"
                transform="translate(0 15)"
                width="5"
              />
              <rect
                className="logo-part logo-part-5"
                fill="#25AAE1"
                height="5"
                transform="translate(0 20)"
                width="5"
              />
              <rect
                className="logo-part logo-part-6"
                fill="#25AAE1"
                height="5"
                transform="translate(0 25)"
                width="5"
              />
              <rect
                className="logo-part logo-part-7"
                fill="#25AAE1"
                height="5"
                transform="translate(5 30)"
                width="5"
              />
              <rect
                className="logo-part logo-part-8"
                fill="#25AAE1"
                height="5"
                transform="translate(10 35)"
                width="5"
              />
              <rect
                className="logo-part logo-part-9"
                fill="#25AAE1"
                height="5"
                transform="translate(30 0)"
                width="5"
              />
              <rect
                className="logo-part logo-part-10"
                fill="#25AAE1"
                height="5"
                transform="translate(35 5)"
                width="5"
              />
              <rect
                className="logo-part logo-part-11"
                fill="#25AAE1"
                height="5"
                transform="translate(40 10)"
                width="5"
              />
              <rect
                className="logo-part logo-part-12"
                fill="#25AAE1"
                height="5"
                transform="translate(40 15)"
                width="5"
              />
              <rect
                className="logo-part logo-part-13"
                fill="#25AAE1"
                height="5"
                transform="translate(40 20)"
                width="5"
              />
              <rect
                className="logo-part logo-part-14"
                fill="#25AAE1"
                height="5"
                transform="translate(40 25)"
                width="5"
              />
              <rect
                className="logo-part logo-part-15"
                fill="#25AAE1"
                height="5"
                transform="translate(35 30)"
                width="5"
              />
              <rect
                className="logo-part logo-part-16"
                fill="#25AAE1"
                height="5"
                transform="translate(30 35)"
                width="5"
              />
            </g>
          </svg>
        </OTFLoadingIcon>
      </div>
    </div>
  </LoadingPanel>
</ScreeningStatusContainer>
`;

exports[`Test screening decision Container Should render review form with loading false & defaultoptions empty 1`] = `
<ScreeningStatusContainer
  defaultOptions={Object {}}
  initializeAction={
    [MockFunction] {
      "calls": Array [
        Array [
          1,
        ],
      ],
    }
  }
  screeningInfo={
    Object {
      "loading": false,
    }
  }
  submissionID={1}
/>
`;
